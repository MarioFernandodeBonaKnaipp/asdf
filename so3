import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;

public class SortingAnalysisAutoria3 {

    public static void main(String[] args) {

        String[] files = {
            "aleatorio_100.csv", "aleatorio_1000.csv", "aleatorio_10000.csv",
            "crescente_100.csv", "crescente_1000.csv", "crescente_10000.csv",
            "decrescente_100.csv", "decrescente_1000.csv", "decrescente_10000.csv"
        };

        for (String file : files) {
            System.out.println("\nArquivo: " + file);
            int[] data = readData(file);


            int[] bubbleData = Arrays.copyOf(data, data.length);
            long startTime = System.nanoTime();
            bubbleSort(bubbleData);
            long endTime = System.nanoTime();
            System.out.println("Bubble Sort: " + (endTime - startTime) + " ns");


            int[] insertionData = Arrays.copyOf(data, data.length);
            startTime = System.nanoTime();
            insertionSort(insertionData);
            endTime = System.nanoTime();
            System.out.println("Insertion Sort: " + (endTime - startTime) + " ns");


            int[] quickData = Arrays.copyOf(data, data.length);
            startTime = System.nanoTime();
            quickSort(quickData, 0, quickData.length - 1);
            endTime = System.nanoTime();
            System.out.println("Quick Sort: " + (endTime - startTime) + " ns");
        }
    }

    private static int[] readData(String fileName) {
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            return br.lines().mapToInt(Integer::parseInt).toArray();
        } catch (IOException e) {
            System.err.println("Erro ao ler o arquivo: " + fileName);
            return new int[0];
        }
    }

    private static void bubbleSort(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }

    private static void insertionSort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            int key = array[i];
            
            int j;
            for (j = i - 1; j >= 0 && array[j] > key; j--) {
                array[j + 1] = array[j];
            }
            array[j + 1] = key;
        }
    }


    private static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            int pi = partition(array, low, high);
            quickSort(array, low, pi - 1);
            quickSort(array, pi + 1, high);
        }
    }

    private static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (array[j] <= pivot) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;
        return i + 1;
    }
}
